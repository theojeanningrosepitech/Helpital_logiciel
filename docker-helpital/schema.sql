/*
Postgres need to be installed
Create an user named 'postgres' and give it access
Fill the table with data and it will work
You'll also need to change variable as postgres password in database.js
*/

/* RÔLE TABLE */
create table software_role (
    id           int generated by default as identity (start with 1 increment by 1) primary key,
    role_name    text
);
alter table software_role
    owner to postgres;

insert into public.software_role (id, role_name)
values  (1, 'Admin'),
        (2, 'Chef de service'),
        (3, E'Médecin'),
        (4, 'Infirmier'),
        (5, 'Réceptionniste'),
        (6, 'Intérim');

/* LOGO AVATAR TABLE */
create table software_avatar (
    id           int generated by default as identity (start with 1 increment by 1) primary key,
    avatar_link  text

);
alter table software_avatar
    owner to postgres;

insert into public.software_avatar (id, avatar_link)
values  (1, 'assistance-medicale2.png'),
        (2, 'assistance-medicale3.png'),
        (3, 'infirmiere.png'),
        (4, 'assistance-medicale.png'),
        (5, 'infirmiere2.png'),
        (6, 'infirmiere3.png'),
        (7, 'docteur2.png'),
        (8, 'docteur.png'),
        (9, 'docteur3.png'),
        (10, 'docteur4.png');

/* BANNER PROFIL TABLE */

create table banner (
    id           int generated by default as identity (start with 1 increment by 1) primary key,
    banner_color text
);
alter table banner
    owner to postgres;

insert into public.banner (id, banner_color)
values  (1, '#4a9eff'),
        (2, '#44cf60'),
        (3, '#ffb637'),
        (4, '#de5daa'),
        (5, '#ec3a3a'),
        (6, '#5931c5');

/* XRAYS TABLE */
create table xrays (
    id          serial unique primary key,
    href        text unique,
    date        timestamp not null,
    lastEdit    timestamp not null
);
alter table xrays
    owner to postgres;

/* SERVICE TABLE */
create table services
(
    id    serial unique primary key,
    title text not null
);
alter table services
    owner to postgres;

insert into public.services (title)
values  ('Admin'),
        ('Radiologie'),
        ('Cardiologie'),
        ('Pédiatrie'),
        ('Pneumologie'),
        ('Neurologie'),
        ('Cancerologie'),
        ('Néphrologie'),
        ('Psychologie'),
        ('Soins palliatifs'),
        ('Reception');

/** AVAILABILITIES TABLE **/
create table availabilities
(
    id          serial  unique primary key,
    user_id     int    not null,
    title       int     not null,
    note        text,
    send_at     timestamp not null,
    close_at    timestamp default null
);
alter table availabilities
    owner to postgres;

/** CONTRACT TABLE **/
create table contract
(
    id          serial  unique primary key,
    user_id     int     not null,
    title       text    not null,
    start_at    timestamp not null,
    close_at    timestamp default null
);
alter table contract
    owner to postgres;

insert into public.contract (user_id, title, start_at)
values  (1, 'CDI', '2022-02-02 14:00:00'),
        (2, 'CDI', '2022-01-02 14:00:00'),
        (3, 'CDI', '2022-02-10 14:00:00'),
        (4, 'CDI', '2022-02-12 14:00:00'),
        (5, 'CDI', '2022-02-02 14:00:00'),
        (6, 'CDI', '2022-02-14 14:00:00'),
        (7, 'CDI', '2022-02-02 14:00:00'),
        (8, 'CDI', '2022-02-15 14:00:00'),
        (9, 'CDI', '2022-02-02 14:00:00'),
        (10, 'CDI', '2022-02-02 14:00:00'),
        (11, 'CDI', '2022-06-02 14:00:00'),
        (12, 'CDI', '2022-07-02 14:00:00'),
        (13, 'CDI', '2022-08-02 14:00:00'),
        (14, 'CDI', '2022-07-03 14:00:00'),
        (15, 'CDI', '2022-02-02 14:00:00'),
        (16, 'CDI', '2022-02-02 14:00:00'),
        (17, 'CDI', '2022-04-02 14:00:00'),
        (18, 'CDI', '2022-02-02 14:00:00'),
        (19, 'CDI', '2022-07-02 14:00:00'),
        (20, 'CDI', '2022-08-02 14:00:00'),
        (21, 'CDI', '2022-02-02 14:00:00'),
        (22, 'CDI', '2022-10-02 14:00:00'),
        (23, 'CDI', '2022-10-14 14:00:00');

CREATE TYPE enum_method_2fa AS ENUM ('email', 'sms', 'totp');
CREATE TYPE enum_themes AS ENUM ('classic', 'dark');

/* USER LOGIN TABLE */
create table users
(
    id           serial unique primary key,
    login        text unique,
    password     text not null,
    user_role    int default 5,
    service      int default 4,
    avatar       text default '',
    banner       text default '#4a9eff',
    firstname    text default NULL::bpchar,
    lastname     text default NULL::bpchar,
    phone        text,
    email        text,
    totp_secret  text,
    nfc_code     char(16),
    prefered_2fa_method enum_method_2fa default 'email',
    prefered_theme      enum_themes default 'classic',
    prefered_floor      int default 1,
    accessibility       boolean default false,
    favorite_pages   text,
    here            int default 0,
    group_service   int default 0,
    availability    int default 0,
    contract         int default 0,
    filter          int default 1,
    dashboard_layout   text default null,

    -- FOREIGN KEY (avatar)    REFERENCES software_avatar(id),
    -- FOREIGN KEY (banner)    REFERENCES banner(id),
    FOREIGN KEY (user_role) REFERENCES software_role(id),
    FOREIGN KEY (service)  REFERENCES services(id)
);
alter table users
    owner to postgres;

insert into public.users (login, password, user_role, service, banner, firstname, lastname, phone, email, contract)
values  ('arthur.petit', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Arthur', 'Petit', '0654321001', 'arthur.petit@epitech.eu', 1),
        ('bryanice', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 2, 3, 'bryan', 'nice', '0654321002', 'bryanice@hotmail.fr', 1),
        ('andre.dubois', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 3, 1, 'Andre', 'Dubois', '0654321003', 'andre.dubois@epitech.eu', 1),
        ('helene.martin', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 4, 1, 'Helene', 'Lartin', '0654321004', 'helene.martin@epitech.eu', 1),
        ('adrien.robert', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 5, 1, 'Adrien', 'Robert', '0654321005', 'adrien.robert@epitech.eu', 1),
        ('delphine.lefevre', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 6, 1, 'Delphine', 'Lefevre', '0654321006', 'delphine.lefevre@epitech.eu', 1),
        ('gabriel.roux', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 7, 1, 'Gabriel', 'Roux', '0654321007', 'gabriel.roux@epitech.eu', 1),
        ('amandine.andre', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 8, 1, 'Amandine', 'Andre', '0654321008', 'amandine.andre@epitech.eu', 1),
        ('paul.boyer', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 9, 1, 'Paul', 'Boyer', '0654321009', 'paul.boyer@epitech.eu', 1),
        ('pascale.gauthier', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 2, 10, 1, 'Pascale', 'Gauthier', '0654321010', 'pascale.gauthier@epitech.eu', 1),
        ('vivian.rousseau', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 3, 2, 1, 'Vivian', 'Rousseau', '0654321011', 'vivian.rousseau@epitech.eu', 1),
        ('dorian.leger', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 4, 2, 1, 'Dorian', 'Leger', '0641044560', 'arnaud.lubert@epitech.eu', 1),
        ('prudence.collet', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 5, 2, 1, 'Prudence', 'Collet', '0641044560', 'arnaud.lubert@epitech.eu', 1),
        ('arnaud.lubert', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Arnaud', 'Lubert', '0641044560', 'arnaud.lubert@epitech.eu', 1),
        ('marianne.levee', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Marianne', 'Levee', '0641044560', 'marianne.levee@epitech.eu', 1),
        ('emmanuel.lena', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Emmanuel', 'Lena', '0641044560', 'emmanuel.lena@epitech.eu', 1),
        ('paul.riba', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Paul', 'Riba', '0641044560', 'paul.riba@epitech.eu', 1),
        ('theo.jeanningros', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Theo', 'Jeanningros', '0641044560', 'theo.jeanningros@epitech.eu', 1),
        ('bryan.fortin', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Bryan', 'Fortin', '0641044560', 'bryan.fortin@epitech.eu', 1),
        ('irama.chaouch', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Irama', 'Chaouch', '0641044560', 'irama.chaouch@epitech.eu', 1),
        ('cesar.venzac', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Cesar', 'Venzac', '0641044560', 'cesar.venzac@epitech.eu', 1),
        ('charles.debrix', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 1, 1, 1, 'Charles', 'Debrix', '0641044560', 'charles.debrix@epitech.eu', 1),
        ('ursule.perrot', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 6, 2, 1, 'Ursule', 'Perrot', '0654321014', 'ursule.perrot@epitech.eu', 1),
        ('eva.berly', '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', 5, 11, 1, 'Eva', 'Berly', '0668524232', 'eva.berly@epitech.eu', 1);


create table sessions
(
    id              serial unique primary key,
    uuid            char(36) unique not null,
    user_id         int not null,
    device_type     int default 0,
    created_at      timestamp not null,
    expires_at      timestamp not null,

    FOREIGN KEY (user_id)    REFERENCES users(id)
);
alter table sessions
    owner to postgres;

create table log_service
(
    id          serial unique primary key,
    service     int,
    done_by     int       default null,
    for_him     int       not null,
    content     text      not null,
    send_at     timestamp not null,

    FOREIGN KEY (service) REFERENCES services(id)
);
alter table log_service
    owner to postgres;

insert into public.log_service (service, done_by, for_him, content, send_at)
values  (2, NULL, 2, 'a commencé son service le', '2022-02-02 14:00:00'),
        (2, NULL, 2, 'a fini son service le', '2022-02-02 17:00:00');

create table group_service
(
    id          serial unique primary key,
    service     int,
    chief       int,
    users_id    text      not null,
    name        text      not null,

    FOREIGN KEY (service) REFERENCES services(id)
);
alter table group_service
    owner to postgres;

create table two_factor_authentication
(
    id             serial unique primary key,
    token          char(32) unique not null,
    code           char(6) not null,
    device_type    int default 0,
    user_id        int not null,
    created_at     timestamp not null,
    expires_at     timestamp not null,

    FOREIGN KEY (user_id)    REFERENCES users(id)
);
alter table two_factor_authentication
    owner to postgres;

create table rooms_types (
   id           serial unique primary key,
   display_name text   not null
);
alter table rooms_types owner to postgres;

insert into public.rooms_types (display_name)
values  ('Pièce neutre'),
        ('Chambre'),
        (E'Salle d\'opération'),
        ('Salle de consultation'),
        (E'Salle d\'attente');

/* ROOMS TABLE */
create table rooms
(
    id          serial unique primary key,
    title       text not null,
    type        int  not null,
    service_id  int  not null,
    floor       int  not null,
    capacity    int,
    building_id int,
    position_x  int,
    position_y  int,
    corners     text,
    supervisor  int,
    r_sex       text,

    FOREIGN KEY (supervisor) REFERENCES users (id),
    FOREIGN KEY (service_id) REFERENCES services(id),
    FOREIGN KEY (type) REFERENCES rooms_types(id)
);
alter table rooms
    owner to postgres;

insert into public.rooms (title, type, service_id, floor, supervisor, capacity, corners, position_x, position_y, r_sex)
values  ('Bloc opératoire', 3, 2, -1, 2, 1, '-5,-8;5,-8;5,5;-5,5', 0, 0, 'H'),
        ('Cagibi A1', 1, 4, 1, 2, 0, '-5,-3;-2,-3;-2,-1;-5,-1', -5, 0, 'H'),
        ('R1', 2, 5, 1, 2, 3, '-3,-3;0,-3;0,-1;-3,-1', 0, 0, 'F'),
        ('101', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', -4, 0, 'M'),
        ('102', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', -4, -6, 'M'),
        ('Couloir A0', 1, 4, 0, 2, 0, '-10,-1;29,-1;29,1;-10,1', 0, 0, 'H'),
        ('Couloir A1', 1, 4, 1, 2, 0, '-10,-1;29,-1;29,1;-10,1', 0, 0, 'F'),
        ('A1', 2, 6, 2, 2, 2, '-3,-5;0,-5;0,-1;-3,-1', 0, 0, 'F'),
        ('A2', 2, 6, 2, 2, 2, '-3,1;0,1;0,5;-3,5', 0, 0, 'F'),
        ('A3', 2, 6, 2, 2, 2, '0,-5;3,-5;3,-1;0,-1', 0, 0, 'F'),
        ('Cagibi B1', 1, 4, 1, 2, 0, '-10,1;-7,1;-7,3;-10,3', 0, 0, 'H'),
        ('Ascenseur A1', 1, 4, 1, 2, 0, '-13,-1;-10,-1;-10,1;-13,1', 0, 0, 'M'),
        ('Escalier A1', 1, 4, 1, 2, 0, '29,-3;33,-3;33,1;29,1', 0, 0, 'M'),
        ('103', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', -1, 0, 'F'),
        ('104', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', -1, -6, 'F'),
        ('105', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 2, 0, 'F'),
        ('106', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 2, -6, 'F'),
        ('107', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 5, 0, 'H'),
        ('108', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 5, -6, 'H'),
        ('109', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 8, 0, 'H'),
        ('110', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 8, -6, 'H'),
        ('111', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 11, 0, 'M'),
        ('112', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 11, -6, 'M'),
        ('113', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 14, 0, 'M'),
        ('114', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 14, -6, 'M'),
        ('115', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 17, 0, 'F'),
        ('116', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 17, -6, 'M'),
        ('117', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 20, 0, 'H'),
        ('118', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 20, -6, 'H'),
        ('119', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 23, 0, 'F'),
        ('120', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 23, -6, 'F'),
        ('121', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 26, 0, 'F'),
        ('122', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 26, -6, 'F'),
        ('123', 2, 4, 1, 2, 3, '-3,1;0,1;0,5;-3,5', 29, 0, 'F'),
        ('124', 2, 4, 1, 2, 2, '-3,1;0,1;0,5;-3,5', 29, -6, 'F'),
        ('Radiographie', 4, 4, 0, 2, 2, '13,1;19,1;19,8;13,8', 0, 0, 'F'),
        (E'Salle d\'attente A0', 5, 4, 0, 2, 30, '-13,1;-2,1;-2,8;-13,8', 0, 0, 'F'),
        (E'Salle d\'attente B0', 5, 4, 0, 2, 30, '6,1;13,1;13,8;6,8', 0, 0, 'F'),
        ('Accueil', 1, 4, 0, 2, 3, '-2,1;6,1;6,4;-2,4', 0, 0, 'F'),
        ('Entrée principale', 1, 4, 0, 2, 0, '-2,4;6,4;6,16;-2,16', 0, 0, 'F'),
        ('Ascenseur B0', 1, 4, 0, 2, 0, '26,1;29,1;29,5;26,5', 0, 0, 'F'),
        ('Entree urgences', 1, 4, 0, 2, 0, '29,-1;26,-1;26,-6;42,-6;42,4;37,4;37,-3;29,-3', 0, 0, 'F'),
        ('Bloc opératoire A0', 3, 4, 0, 2, 1, '19,1;26,1;26,8;19,8', 0, 0, 'F'),
        ('Bloc opératoire B0', 3, 4, 0, 2, 1, '19,-8;26,-8;26,-1;19,-1', 0, 0, 'F'),
        ('Consultation 1', 4, 4, 0, 2, 1, '-10,-5;-7,-5;-7,-1;-10,-1', 0, 0, 'H'),
        ('Consultation 2', 4, 4, 0, 2, 1, '-10,-5;-7,-5;-7,-1;-10,-1', 3, 0, 'M'),
        ('Consultation 3', 4, 4, 0, 2, 1, '-10,-5;-7,-5;-7,-1;-10,-1', 6, 0, 'M'),
        ('Consultation 4', 4, 4, 0, 2, 1, '-10,-5;-7,-5;-7,-1;-10,-1', 9, 0, 'M'),
        ('Consultation 5', 4, 4, 0, 2, 1, '-10,-5;-7,-5;-7,-1;-10,-1', 12, 0, 'H'),
        ('Consultation 6', 4, 4, 0, 2, 1, '-10,-5;-7,-5;-7,-1;-10,-1', 15, 0, 'H'),
        ('Consultation 7', 4, 4, 0, 2, 1, '-10,-5;-7,-5;-7,-1;-10,-1', 18, 0, 'M'),
        ('Consultation 8', 4, 4, 0, 2, 1, '-10,-5;-7,-5;-7,-1;-10,-1', 21, 0, 'H'),
        ('Consultation 9', 4, 4, 0, 2, 1, '-10,-5;-5,-5;-5,-1;-10,-1', 24, 0, 'F'),
        ('Ascenseur A0', 1, 4, 0, 2, 0, '-13,-1;-10,-1;-10,1;-13,1', 0, 0, 'M'),
        ('Escalier A0', 1, 4, 0, 2, 0, '29,-3;33,-3;33,1;29,1', 0, 0, 'H');

create table oauth2 (
    id          serial  unique primary key,
    expiration  timestamp not null,
    service     text not null,
    email       text not null,
    bearer      text not null,
    refresh_token text not null
);
alter table oauth2 owner to postgres;

insert into public.oauth2 (service, expiration, email, bearer, refresh_token)
values  ('google', '2000-01-01', '', '', '');

/* VEHICL INFO TABLE */

create table vehicl (
   id               serial   unique primary key,
   title            text     not null,
   service_id       int      not null,
   number           int      not null,
   type             text     not null,
   size             int      not null,
   capacity         int      not null,
   description      text     not null
);
alter table vehicl
    owner to postgres;

insert into public.vehicl (title, service_id, number, type, size, capacity, description)
values  ('AMBULANCE DU FLOCON', 2, 0154, 'AMBULANCE', 3, 1, 'Nice Ville'),
        ('BIO AMBULANCE', 4, 0712, 'AMBULANCE', 3, 1, 'Nice St Augustin'),
        ('CHRONO AMBULANCE', 5, 0251, 'AMBULANCE', 3, 1, 'Nice Riquier'),
        ('ELITE AMBULANCE', 5, 0335, 'AMBULANCE', 3, 1, 'Cannes'),
        ('ALLIANCE POMPIER', 4, 0112, 'POMPIER', 3, 1, 'Cannes'),
        ('EXPERT POMPIER', 4, 0278, 'POMPIER', 3, 1, 'Antibes'),
        ('FTPPOMPIER', 4, 0278, 'POMPIER', 3, 1, 'Cagnes Sur Mer'),
        ('POMPERUE', 4, 0432, 'POMPIER', 3, 1, 'Grasse'),
        ('CONSULTING SAMU', 4, 0076, 'SAMU', 3, 1, 'Nice Ville'),
        ('ORSAMU', 4, 0998, 'SAMU', 3, 1, 'Nice Ville'),
        ('SAMU GO', 4, 0554, 'SAMU', 3, 1, 'Cannes'),
        ('SAMU', 4, 0333, 'SAMU', 3, 1, 'Antibes');

/* TREATMENT ROOM INFO TABLE */

create table treatment_room (
   id               serial   unique primary key,
   service_id       int      not null,
   patient_id       int
);
alter table treatment_room
    owner to postgres;

insert into public.treatment_room (service_id, patient_id)
values  (2, 1),
        (2, null),
        (2, null),
        (2, null),
        (2, null),
        (2, null);

/* DOCTOR INFO TABLE */

create table doctor (
   id               serial   unique primary key,
   service_id       int      not null,
   firstname        text     not null,
   lastname         text     not null,
   title            text     not null,
   identity         text     not null,
   email            text     not null,
   phone            text     not null
);
alter table doctor
    owner to postgres;

insert into public.doctor (service_id, firstname, lastname, title, identity, email, phone)
values  (2, 'Alice', 'Petit', 'Médecin Urgentiste', 'alice.petit', 'alice.petit@helpital.fr', '+33654367890'),
        (2, 'Martin', 'Moulin', 'Médecin Géneraliste', 'martin.moulin', 'martin.moulin.fr', '+33654887693'),
        (2, 'Fatima', 'Legros', 'Pédiatre', 'fatima.legros', 'fatima.legros@helpital.fr', '+33734556321'),
        (2, 'Sabrina', 'Xu', 'Médecin Urgentiste', 'sabrina.xu', 'sabrina.xu@helpital.fr', '+33766657878'),
        (2, 'Charles', 'Bieber', 'Médecin Urgentiste', 'charles.bieber', 'charles.bieber@helpital.fr', '+33754435120'),
        (2, 'Quentin', 'Petit', 'Pédiatre', 'quentin.petit', 'quentin.petit@helpital.fr', '+33600567212'),
        (2, 'Aline', 'Bosc', 'Médecin Géneraliste', 'aline.bosc', 'aline.bosc@helpital.fr', '+33600933218'),
        (2, 'Ali', 'Remi', 'Médecin Géneraliste', 'ali.remi', 'ali.remi@helpital.fr', '+33676788943'),
        (2, 'Alin', 'Chatin', 'Médecin Géneraliste', 'alin.chatin', 'alin.chatin@helpital.fr', '+33601123212'),
        (2, 'Thiery', 'Brez', 'Médecin Urgentiste', 'thiery.brez', 'thiery.brez@helpital.fr', '+33644512096');

/* MEETING INFO TABLE */

create table meeting (
   id               serial   unique primary key,
   service_id       int,
   title            text     not null,
   description      text,
   n_creator        text     not null,
   identity         text     not null,
   n_content        text     not null,
   file             text,
   creation_date    timestamp default current_timestamp
);
alter table meeting owner to postgres;

insert into public.meeting (service_id, title, description, n_creator, identity, n_content, file, creation_date)
values  (2, 'Compte rendu 1', 'Ceci est un compte rendu', 'alin.martinez', 'alice.petit', 'Ce compte rendu a été créer pour tester le back et voir si il est bien fonctionel.', 'test', '2022-03-23 22:53:13.314958');

/* NURSE INFO TABLE */

create table nurse (
   id               serial   unique primary key,
   service_id       int      not null,
   firstname        text     not null,
   lastname         text     not null,
   title            text     not null,
   identity         text     not null,
   email            text     not null,
   phone            char(13)     not null
);
alter table nurse
    owner to postgres;

insert into public.nurse (service_id, firstname, lastname, title, identity, email, phone)
values  (2, 'Alin', 'Rais', 'Infirmier Anesthésiste', 'alin.rais', 'alin.rais@helpital.fr', '+33655467689'),
        (2, 'Chahine', 'Dupret', 'Aide soignante', 'chahine.dupret', 'chahine.dupret.fr', '+33600953156'),
        (2, 'Margot', 'Xu', 'Infirmier Anesthésiste', 'margot.xu', 'margot.xu@helpital.fr', '+33766546781'),
        (2, 'Thomas', 'Moulin', 'Aide soignant', 'thomas.moulin', 'thomas.moulin@helpital.fr', '+33700976997'),
        (2, 'Jérôme', 'Thier', 'Aide soignant', 'jerome.thier', 'jerome.thier@helpital.fr', '+33722100989'),
        (2, 'Justine', 'Petit', 'Aide soignante', 'justine.petit', 'justine.petit@helpital.fr', '+33611324546'),
        (2, 'Eyrena', 'Bieber', 'Aide soignante', 'eyrena.bieber', 'eyrena.bieber@helpital.fr', '+33600665543'),
        (2, 'Auguest', 'Barbier', 'Infirmier Stagiaire', 'auguest.barbier', 'auguest.barbier@helpital.fr', '+33611432789'),
        (2, 'Ilnaz', 'Pey', 'Infirmier Anesthésiste', 'ilnaz.pey', 'ilnaz.pey@helpital.fr', '+33633212124'),
        (2, 'Eleyna', 'Vander', 'Infirmiere Stagiaire', 'eleyna.vander', 'eleyna.vander@helpital.fr', '+33690954654'),
        (2, 'Marie', 'Chair', 'Aide soignante', 'marie.chair', 'marie.chair@helpital.fr', '+33733241908'),
        (2, 'Antonin', 'Petit', 'Infirmier Stagiaire', 'antonin.petit', 'antonin.petit@helpital.fr', '+33600945633'),
        (2, 'Antoinette', 'Bosc', 'Infirmier Généraliste', 'antoinette.bosc', 'antoinette.bosc@helpital.fr', '+336112323009'),
        (2, 'Melanie', 'Andy', 'Infirmiere Généraliste', 'melanie.andy', 'melanie.andy@helpital.fr', '+33607654345'),
        (2, 'Ali', 'Chatin', 'Infirmier Généraliste', 'ali.chatin', 'ali.chatin@helpital.fr', '+33679034532'),
        (2, 'Quentin', 'Bernard', 'Infirmier Généraliste', 'quentin.bernard', 'quentin.bernard@helpital.fr', '+33677676345');


/* PATIENT INFO TABLE */
create table patients
(
    id              serial unique primary key,
    firstname       text not null,
    lastname        text not null,
    birthdate       timestamp not null,
    ss_number       char(13) unique,
    height          float not null default 0,
    weight          float not null default 0,
    age             int not null default 0,
    imc             int not null default 0,
    blood_type      text not null,
    gender          char(1) not null default ' ',
    allergies       text,
    room_id         int not null default 0,
    service_id      int not null default 11,
    visit_number    int not null default 0,
    is_hospitalized boolean default false,
    doctor_id       int not null default 0,

    FOREIGN KEY (service_id) REFERENCES services(id)
);
alter table patients
    owner to postgres;

insert into public.patients (firstname, lastname, birthdate, ss_number, height, weight, age, imc, blood_type, gender, allergies, room_id, service_id, visit_number, is_hospitalized, doctor_id)
values  ('Axel', 'Bertin', '2000-07-19 12:00:00.000000', '0123456789012', 1.73, 70.3, 54, 23, 'A', 'M', '', 1, 11, 26353, true, 21),
        ('Alize', 'Charles', '1999-02-21 12:00:00.000000', '0123456789013', 1.73, 70.3, 50, 23, 'A', 'F', 'Chats', 4, 11, 26353, false, 17),
        ('Audrey', 'Noel', '1995-11-12 12:00:00.000000', '0123456789014', 1.73, 70.3, 44, 23, 'A', 'F', 'Chiens', 1, 11, 26353, false, 19),
        ('Emma', 'Gaillard', '1997-05-02 12:00:00.000000', '0123456789015', 1.73, 70.3, 76, 23, 'A', 'F', 'Pollens', 1, 11, 26353, true, 21),
        ('Lucas', 'Roy', '1974-07-04 12:00:00.000000', '0123456789016', 1.73, 70.3, 14, 22, 'A', 'M', '', 1, 11, 26353, false, 21),
        ('Adam', 'Leroux', '1985-08-06 12:00:00.000000', '0123456789017', 1.73, 70.3, 54, 22, 'A', 'M', '', 1, 11, 26353, false, 17),
        ('Hugo', 'Gerard', '1965-04-25 12:00:00.000000', '0123456789018', 1.73, 70.3, 54, 22, 'A', 'M', '', 1, 4, 26353, false, 17),
        ('Noah', 'Picard', '1987-07-23 12:00:00.000000', '0123456789019', 1.73, 70.3, 20, 22, 'A', 'M', 'Chiens', 1, 4, 26353, false, 19),
        ('Liam', 'Chauvin', '1994-06-19 12:00:00.000000', '0123456789020', 1.73, 70.3, 54, 22, 'A', 'M', '', 1, 4, 26353, true, 21),
        ('Paul', 'Bouchet', '1986-07-10 12:00:00.000000', '0123456789021', 1.73, 70.3, 33, 22, 'A', 'M', 'Chats et chiens', 1, 4, 26353, false, 17),
        ('Ethan', 'Olivier', '1998-03-05 12:00:00.000000', '0123456789022', 1.73, 70.3, 54, 22, 'A', 'M', '', 1, 4, 26353, false, 19),
        ('Sacha', 'Lemaitre', '2001-02-11 12:00:00.000000', '0123456789023', 1.73, 70.3, 51, 22, 'A', 'M', 'Chiens et pollens', 1, 4, 26353, false, 19);

/* PATIENT FILES AND ARCHIVES */
create table patient_files (
    id            serial unique primary key,
    patient_id    int   default 0,
    filename      text  not null,
    type          text  not null,
    size          text  not null,
    create_at     text,
    modify_at     text,
    content       text
);
alter table patient_files owner to postgres;

insert into patient_files (patient_id, filename, type, size, create_at, modify_at, content)
values  (1, 'Radio', 'PDF', '1 Mo', '12-11-2007', '11-11-2007', 'Radiographie de la main du patient X'),
        (1, 'Scanner', 'PNG', '307 Ko', '08-06-2013', '11-09-2012', 'Scanner du pied du patient Y'),
        (0, 'Prescriptions', 'DOCX', '2 Go', '14-12-2021', '13-10-2020', 'Prescription pour les migraines du patient Z');

create table patient_archives (
    id            serial unique primary key,
    patient_id    int   default 0,
    filename      text  not null,
    type          text  not null,
    size          text  not null,
    create_at     text,
    modify_at     text,
    content       text
);
alter table patient_archives owner to postgres;

insert into patient_archives (patient_id, filename, type, size, create_at, modify_at, content)
values  (1, 'Attestations', 'DOCX', '1 Mo', '12-11-2007', '11-11-2007', 'Attestations du patient X'),
        (1, 'Autorisation de sortie', 'PDF', '307 Ko', '08-06-2013', '11-09-2012', 'Autorisation de sortie du patient Y'),
        (0, 'Carte vitale', 'PNG', '2 Go', '14-12-2021', '13-10-2020', 'Carte vitale du patient Z : 123456789123');

create table files (
    id            serial unique primary key,
    uuid          char(36) unique not null,
    folder        char(36),
    user_id       int   not null,
    patient_id    int   default 0,
    filename      text  not null,
    display_name  text  not null,
    extension     text  not null,
    mime_type     text  not null,
    size          bigint  not null,
    creation      timestamp default current_timestamp,
    last_update   timestamp default current_timestamp
);
alter table files owner to postgres;

create table folders (
    id            serial unique primary key,
    uuid          char(36) unique not null,
    folder        char(36),
    user_id       int   not null,
    patient_id    int   default 0,
    filename      text  not null,
    creation      timestamp default current_timestamp,
    last_update   timestamp default current_timestamp
);
alter table folders owner to postgres;

create table files_shared_users (
    id            serial unique primary key,
    file_uuid     char(36) not null,
    user_id       int   not null,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
alter table files_shared_users owner to postgres;

create table files_favorite_users (
    id            serial unique primary key,
    file_uuid     char(36) not null,
    user_id       int   not null,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
alter table files_favorite_users owner to postgres;

/* PLANNING TABLE */
create table planning
(
    id            serial unique primary key,
    title         text      not null,
    description   text,
    creation_date timestamp default current_timestamp,
    user_id       int,
    begin_at      timestamp not null,
    end_at        timestamp not null,
    duration      int       not null,
    ss_number     char(13),
    type          text,
    report        text,
    FOREIGN KEY (user_id) REFERENCES users (id)
);
alter table planning
    owner to postgres;

insert into public.planning (title, description, creation_date, user_id, begin_at, end_at, duration)
values  ('Opération', 'Opération du fois en urgence', '2021-11-25 22:53:13.314958', 21, '2022-10-27 09:00:00.000000', '2022-10-27 10:00:00.000000', 3600),
        ('Radio des poumons', 'Une radio des poumons est demandée par le médecin traitant', '2022-11-25 22:53:13.353990', 21, '2022-10-28 14:30:00.000000', '2022-10-29 15:30:00.000000', 3600),
        ('Analyse urine', E'Analyse de l\'urine', '2021-11-25 22:53:13.393052', 21, '2022-10-26 14:00:00.000000', '2022-10-26 16:00:00.000000', 7200),
        ('Analyse de sang', 'Prise de sang', '2021-11-25 22:53:13.432404', 21, '2022-10-25 16:00:00.000000', '2022-10-25 16:00:00.000000', 1000),
        ('Opération', E'Opération de l\'appendice', '2021-11-25 22:53:13.471096', 21, '2022-10-27 11:00:00.000000', '2022-10-27 14:00:00.000000', 14400),
        ('Opération', 'Opération de la hanche', '2021-11-25 22:53:13.499679', 21, '2022-10-27 11:00:00.000000', '2022-10-27 11:30:00.000000', 1800);

/* TABLE NOTE */

create table note_priority (
    id           int generated by default as identity (start with 1 increment by 1) primary key,
    title    text
);
alter table note_priority
    owner to postgres;

insert into public.note_priority (id, title)
values  (1, 'Basse'),
        (2, 'Moyenne'),
        (3, 'Élevée'),
        (4, 'Trés élevée');

create table note (
   id    serial   unique primary key,
   creator_id       int not null,
   patient_id       int not null,
   ss_number        char(13) not null,
   content          text,
   priority         int,
   creation_date      timestamp not null,
   validity           timestamp not null,
   modification_date      timestamp not null,

   FOREIGN KEY (priority) REFERENCES note_priority(id),
   FOREIGN KEY (creator_id) REFERENCES users(id),
   FOREIGN KEY (patient_id) REFERENCES patients(id)
);
alter table note owner to postgres;

/*create table note (
   id    serial   unique primary key,
   n_creator        text not null,
   n_attached_to char(13) not null,
   n_content text,

   FOREIGN KEY (n_creator) REFERENCES users(login),
   FOREIGN KEY (n_attached_to) REFERENCES patients(ss_number)
);*/
alter table note owner to postgres;

INSERT INTO note (creator_id, patient_id, ss_number, content, priority, creation_date, modification_date, validity) VALUES (1, 1,'0123456789012', 'ce patient est vert', 1,'2021-11-30 19:32:27.775663', '2021-11-30 19:32:27.775663', '2021-11-30 19:32:27.775663');

/* TABLE PRESCRIPTION */

create table prescription (
   id    serial   unique primary key,
   p_creator  text not null,
   p_attached_to char(13) not null,
   p_content text   not null,
   creation_date      timestamp not null,
   modification_date      timestamp not null,
   FOREIGN KEY (p_creator) REFERENCES users(login),
   FOREIGN KEY (p_attached_to) REFERENCES patients(ss_number)
);
alter table prescription owner to postgres;

/*create table prescription (
   id    serial   unique primary key,
   p_creator  text not null,
   p_attached_to char(13) not null,
   p_content text   not null,

   FOREIGN KEY (p_creator) REFERENCES users(login),
   FOREIGN KEY (p_attached_to) REFERENCES patients(ss_number)
);
alter table prescription owner to postgres;*/

/* INVENTORY TABLES */
create table inventory_types
(
    id           serial
        constraint inventory_types_pkey
            primary key,
    name         text not null,
    display_name text
);
alter table inventory_types
    owner to postgres;

insert into public.inventory_types (name, display_name)
values  ('surgery_tool', 'Outil chirurgical'),
        ('medical_device', 'Appareil médical');


create table inventory
(
    id          serial
        constraint inventory_pkey
            primary key,
    title       text    not null,
    type        integer not null
        constraint inventory_type_fkey
            references inventory_types,
    room_id     integer   default 0,
    quantity    integer   default 0,
    update_date timestamp default CURRENT_TIMESTAMP
);
alter table inventory
    owner to postgres;

insert into public.inventory (title, type, room_id, quantity, update_date)
values  ('Gants', 2, 2, 0, '2021-11-30 19:34:08.857216'),
        ('Respirateur', 1, 3, 1, '2021-11-30 19:32:27.775663'),
        ('Gants', 2, 1, 25, '2021-11-30 19:33:19.431601'),
        ('Scalpel', 2, 2, 15, '2021-11-30 19:32:27.775663'),
        ('Respirateur', 1, 1, 1, '2021-11-30 19:32:27.775663'),
        ('Respirateur', 1, 3, 1, '2021-11-30 19:32:27.775663');


/* MACHINES TABLES */
create table machines
(
    id              serial
        constraint machines_pk
            primary key,
    ethernet        text,
    wifi            text,
    eth0            text,
    last_connection timestamp default CURRENT_TIMESTAMP not null
);
alter table machines
    owner to postgres;
create unique index machines_eth0_uindex
    on machines (eth0);
create unique index machines_ethernet_uindex
    on machines (ethernet);
create unique index machines_id_uindex
    on machines (id);
create unique index machines_wifi_uindex
    on machines (wifi);

insert into public.machines (ethernet, wifi, eth0, last_connection)
values  ('2c:f0:5d:66:70:94', null, null, '2021-11-26 02:20:41.036641'),
         (null, '3c:6a:a7:c3:23:aa', null, '2022-04-26 02:20:41.036641');

create table machines_users
(
    id              serial unique primary key,
    machine_id      integer
        constraint machines_users_machines_id_fk
            references machines,
    user_id         integer
        constraint machines_users_users_id_fk
            references users,
    last_connection timestamp default CURRENT_TIMESTAMP not null
);
alter table machines_users
    owner to postgres;

insert into public.machines_users (machine_id, user_id, last_connection)
values  (1, 1, '2021-12-01 15:03:48.430121'),
        (1, 2, '2021-11-26 01:30:48.638000'),
        (1, 3, '2021-11-30 18:50:47.244513'),
        (1, 6, '2021-11-30 19:35:45.486487'),
        (1, 7, '2021-11-30 19:36:13.028025'),
        (2, 8, '2021-11-30 19:36:13.028025'),
        (2, 9, '2021-11-30 19:36:13.028025'),
        (2, 10, '2021-11-30 19:36:13.028025'),
        (2, 11, '2021-11-30 19:36:13.028025');

/* BACKOFFICE TABLES */
create table back_office
(
    id                   serial
        constraint back_office_pk
            primary key,
    section_name         text not null,
    section_path         text not null,
    section_display_name text
);

alter table back_office
    owner to postgres;

create unique index back_office_id_uindex
    on back_office (id);

create unique index back_office_section_name_uindex
    on back_office (section_name);

create unique index back_office_section_path_uindex
    on back_office (section_path);

create unique index back_office_section_display_name_uindex
    on back_office (section_display_name);

insert into public.back_office (section_name, section_path, section_display_name)
values  ('types', '/rooms/types/new', 'Catégories'),
        ('orders', '/back_office/orders', 'Commandes'),
        ('availability', '/back_office/contract_inavailability', 'Contrat et Indisponibilité'),
        ('insult', '/back_office/insult', 'Filtrer les mots'),
        ('inventory', '/back_office/inventory', 'Inventaire'),
        ('plan', '/plan', 'Plan'),
        ('repairs', '/back_office/repairs', 'Réparations'),
        ('services', '/back_office/services', 'Services'),
        ('admin', '/back_office/admin', 'Système'),
        ('recruiting', '/recruiting', 'Offres emploi'),
        ('users', '/back_office/users', 'Utilisateurs'),
        ('exchangeLoanMaterial', '/exchangeLoanMaterial', 'Prêt de matériel');

create table users_back_office
(
    user_id      integer
        constraint users_back_office_users_id_fk
            references users,
    section_id   integer
        constraint users_back_office_back_office_id_fk
            references back_office,
    is_favorited boolean default false
);

alter table users_back_office
    owner to postgres;

create unique index users_back_office_section_id_uindex
    on users_back_office (section_id);

insert into public.users_back_office (user_id, section_id, is_favorited)
values  (1, 1, 'true'),
        (1, 2, 'true'),
        (1, 3, 'false'),
        (1, 4, 'false');

create table conversation (
    id          serial      unique primary key,
    user_id     text        not null,
    title       text,
    group_conv  int         not null,
    notif       text

    /* FOREIGN KEY (sender_id) REFERENCES users(id)*/
);
alter table conversation owner to postgres;

insert into public.conversation (user_id, title, group_conv)
values  ('0', 'A la une', 2),
        ('0', 'Aide', 2),
        ('0', 'Problème', 2);

/* TABLE MSG */

create table msg (
    id                serial      unique primary key,
    conversation_id   int         default 0,
    content           text        not null,
    content_filter    text        not null,
    file              text,
    file_name         text,
    emergency         int         default 0,
    send_at           timestamp   not null,
    sender_id         int         not null,
    receiver_id       text        not null,
    state             text,
    del_msg           int         default 0,
    group_msg         int
);
alter table msg owner to postgres;

/* Data integrity table */
create table data_integrity_hashes (
    id                      serial unique primary key,
    table_name              text not null,
    data_id                 int,
    hash                    text not null,
    updated_at              timestamp not null
);
alter table data_integrity_hashes
    owner to postgres;

create table temporary_token (
    id          serial  unique primary key,
    user_id     int     not null,
    token       text    not null,
    created_at  timestamp not null,
    expires_at  timestamp not null,

    FOREIGN KEY (user_id)    REFERENCES users(id)
);
alter table temporary_token owner to postgres;

create table contacts (
    id              serial unique primary key,
    user_id         int not null,
    contact_user_id int not null,
    name            text not null,
    fav             int default 0,
    created_at      timestamp not null
);
alter table contacts owner to postgres;

insert into public.contacts (user_id, contact_user_id, name, created_at)
values  (14, 2, 'Jean', '2021-05-02 14:00:00'),
        (14, 3, 'André X)', '2021-05-02 14:01:00');

create table notifications
(
    user_id integer
        constraint notifications_users_id_fk
            references users,
    data    text,
    time    timestamp default CURRENT_TIMESTAMP,
    id      serial,
    event_type text,
    path       text
);

alter table notifications owner to postgres;

create unique index notifications_id_uindex on notifications (id);


create table repair
(
    id         serial
        constraint repair_pk
            primary key,
    created_at timestamp default current_timestamp not null,
    service    int                                 not null,
    room       int                                 not null,
    item       text                                not null,
    reports    int default 1
);

create unique index repair_id_uindex
    on repair (id);

alter table repair owner to postgres;

create table repair_reports
(
    id         int not null
        constraint repair_reports_repair_id_fk
            references repair
            on delete cascade,
    message    text,
    created_at timestamp default current_timestamp
);

alter table repair_reports owner to postgres;

CREATE OR REPLACE FUNCTION public.notify_newtrigger()
returns trigger
language plpgsql
as $function$
begin
    perform pg_notify('new_trigger', '{"source":"' || tg_table_name || '","data":' || row_to_json(NEW)::text || ',"date":"' || current_timestamp || '"}');
return null;
end;
    $function$;

create trigger updated_test_trigger after insert on msg for each row execute procedure notify_newtrigger();
create trigger updated_test_trigger after insert on note for each row execute procedure notify_newtrigger();

/* TABLE SPECIALISTES */

create table specialistes (
    id              serial  unique primary key,
    firstname       text,
    lastname        text,
    mail            text,
    phone           text,
    specialite      text,
    state           text,
    onSpot          int
);
alter table specialistes owner to postgres;

insert into public.specialistes (id, firstname, lastname, mail, phone, specialite, state, onSpot)
values  (1, 'Renato', 'De Natale', 'renato.natale@hotmail.fr', '06.99.07.56.87', 'Ophtalmologue', 'présent', 1),
        (2, 'Emeline', 'Castela', 'emeline.castela@gmail.com', '04.93.55.44.48', 'Dermatologue', 'absent', 0),
        (3, 'Thierry', 'Morysse', 'thierry.morysse@yahou.fr', '06.12.56.76.87', 'Radiologue', 'présent', 1),
        (4, 'Catherine', 'Angenie', 'catherine.angenie@chu-nice.fr', '06.23.07.45.04', 'Psychiatre', 'indisponible', 1),
        (5, 'Louis', 'Postilier', 'louis.postilier@chu-marseille.fr', '06.26.34.56.90', 'Gynécologue', 'absent', 0);

/* TABLE OFFRES D'EMPLOI */

create table recruiting (
    id                  serial,
    type_emploiement    text,
    remuneration        int,
    skills              text,
    start_date          text
);
alter table recruiting owner to postgres;

insert into public.recruiting (id, type_emploiement, remuneration, skills, start_date)
values  (1, 'Interne', 1100, '2 ans médecine', '01/02/2022'),
        (2, 'Pediatre', 1700, '5 ans médecine', '04/05/2023'),
        (3, 'Radiologue', 2800, '7 ans médecine, 4 ans en hôpital', '12/07/2022'),
        (4, 'Interne', 1100, '2 ans médecine', '09/02/2022'),
        (5, 'Interne', 1100, '2 ans médecine', '01/11/2023'),
        (6, 'Gynécologue', 3200, '5 ans médecine, 3 ans en hôpital', '12/06/2022'),
        (7, 'Interne', 1100, '2 ans médecine', '15/03/2023'),
        (8, 'Gynécologue', 3200, '5 ans médecine, 1 an en hôpital', '01/02/2022'),
        (9, 'Brancardier', 900, '1 an médecine', '05/01/2023'),
        (10, 'Interne', 1100, '2 ans médecine', '04/06/2032');

/* TABLE INVENTORY AUTRE HOPITAL */

create table inventory_other_hospital (
    id              serial  unique primary key,
    title        text,
    nb          int,
    chambre     int,
    mail            text
);
alter table inventory_other_hospital owner to postgres;

insert into public.inventory_other_hospital (id, title, nb, chambre, mail)
values  (1, 'Respirateur', 3, 2, 'charles.debrix@hotmail.fr'),
        (2, 'Gants', 2, 3, 'marianne1.levee@epitech.eu'),
        (3, 'IRM', 4, 3, 'marianne1.levee@epitech.eu'),
        (4, 'Respirateur', 2, 3, 'charles.debrix@hotmail.fr'),
        (5, 'Stéthoscopes', 1, 3, 'charles.debrix@hotmail.fr'),
        (6, 'Tensiomètres', 2, 3, 'charles.debrix@hotmail.fr'),
        (7, 'Hémoglobinomètres', 3, 3, 'charles.debrix@hotmail.fr'),
        (8, 'Scanners', 1, 3, 'marianne1.levee@epitech.eu'),
        (9, 'Gants', 5, 3, 'marianne1.levee@epitech.eu'),
        (10, 'Stéthoscopes', 1, 3, 'marianne1.levee@epitech.eu');

create table insult (
    id                  serial  unique primary key,
    name                text not null,
    name_filter         text not null
);
alter table insult owner to postgres;

create table favoris (
    id                  serial  unique primary key,
    user_id             int not null,
    patient_id          int not null,
    creation_date       timestamp not null
);
alter table favoris owner to postgres;

insert into public.favoris (user_id, patient_id, creation_date)
values  (1, 4, '2022-10-02 14:00:00'),
        (1, 3, '2022-10-02 14:00:00');

create table orders (
    id          serial unique primary key,
    title       text,
    status      int default 0,
    created_at timestamp default current_timestamp
);
alter table orders owner to postgres;

insert into public.orders (title, status)
values  ('Respirateur', 0),
        ('Gants', 1),
        ('Respirateur', 0);

create table restaurants (
    id          serial unique primary key,
    title       text,
    hours       text,
    res_type    text
);
alter table restaurants owner to postgres;

insert into public.restaurants (id, title, hours, res_type)
values  (1, 'RelaisH', 'Ouvert de 11H45 à 14H15', 'Self'),
        (2, 'Medirest', 'Ouvert de 13H00 à 17H00', 'Cafeteria'),
        (3, 'Helpifood', 'Ouvert de 11H45 à 15H30', 'Snack');

--------- Relais H

create table menu_relais_h (
    id          serial unique primary key,
    title       text,
    menu_type   text,
    allergies   text,
    nutri_score text
);
alter table menu_relais_h owner to postgres;

insert into public.menu_relais_h (id, title, menu_type, allergies, nutri_score)
values  (1, 'Merlus aux épices', 'Plat principal', 'Blé, Gluten, Celeri, Crustacés, Lait', 'D'),
        (2, 'Pastilla de légumes aux fruits secs', 'Plat principal', 'Blé, Fruit a coques, Soja', 'A'),
        (3, 'Tajine de poulet', 'Plat special', 'Blé', 'A');

--------- Medirest

create table menu_medirest (
    id          serial unique primary key,
    title       text,
    menu_type   text,
    allergies   text,
    nutri_score text
);
alter table menu_medirest owner to postgres;

insert into public.menu_medirest (id, title, menu_type, allergies, nutri_score)
values  (1, 'Poisson de la marée du jour', 'Plat principal', 'Poisson', 'B'),
        (2, 'Quiche Saint-Marcelin graines de courges', 'Plat principal', 'Blé, Lait, Oeuf', 'D'),
        (3, 'Wok de boeuf miel ananas poivron jaune', 'Plat special', 'Blé, Mollusques, Poisson, Soja', 'A');

--------- Helpifood

create table menu_helpifood (
    id          serial unique primary key,
    title       text,
    menu_type   text,
    allergies   text,
    nutri_score text
);
alter table menu_helpifood owner to postgres;

insert into public.menu_helpifood (id, title, menu_type, allergies, nutri_score)
values  (1, 'Joues de boeuf facon bourguignon', 'Plat principal', 'Blé, Gluten, Celeri, Oeufs, Lait', 'B'),
        (2, 'Lieu noir rôti Pesto Rosso', 'Plat principal', 'Poissons, Fruit a coques', 'B'),
        (3, 'Tortilla pommes de terre oignons & salade verte', 'Plat special', 'Oeuf', 'B');
